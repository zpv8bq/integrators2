import subprocess
import numpy as np
import matplotlib.pyplot as plt
import math

dimensions = [3, 5, 10]
Ns = [2**i for i in range(6, 25)]  
r = 1.0

errors = {d: [] for d in dimensions}
uncertainties = {d: [] for d in dimensions}

for d in dimensions:
    print(f"\nRunning Monte Carlo for d = {d}")
    for N in Ns:
        cmd = ["python3", "ndsphere.py", str(d), str(N), str(r)]
        result = subprocess.run(cmd, capture_output=True, text=True)
        output = result.stdout.splitlines()
        relerror = float([line for line in output if "relative error" in line][0].split(":")[1])
        stdev = float([line for line in output if "stat uncertainty" in line][0].split(":")[1])
        errors[d].append(relerror)
        uncertainties[d].append(stdev)

        print(f"N={N:<8} relerror={relerror:.3e}  stdev={stdev:.3e}")

plt.figure(figsize=(8,6))

for d in dimensions:
    sqrtN = np.sqrt(Ns)
    plt.errorbar(sqrtN, errors[d],yerr=uncertainties[d],'o-', label=f"d={d}")

plt.xscale("log")
plt.yscale("log")
plt.xlabel(r"$\sqrt{N}$")
plt.ylabel("Fractional Error")
plt.title("Monte Carlo Convergence for d-Dimensional Spheres")
plt.legend()
plt.grid(True, which="both", ls="--", lw=0.5)
plt.tight_layout()
plt.savefig("convergence.png", dpi=300)
plt.show()
